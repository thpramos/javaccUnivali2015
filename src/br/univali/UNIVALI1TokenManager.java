/* Generated By:JavaCC: Do not edit this line. UNIVALI1TokenManager.java */
package br.univali;
import java.io.*;
import java.util.ArrayList;

/** Token Manager. */
public class UNIVALI1TokenManager implements UNIVALI1Constants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 3;
         return jjMoveNfa_0(12, 0);
      case 10:
         jjmatchedKind = 4;
         return jjMoveNfa_0(12, 0);
      case 13:
         jjmatchedKind = 2;
         return jjMoveNfa_0(12, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(12, 0);
      case 40:
         jjmatchedKind = 45;
         return jjMoveNfa_0(12, 0);
      case 41:
         jjmatchedKind = 46;
         return jjMoveNfa_0(12, 0);
      case 44:
         jjmatchedKind = 32;
         return jjMoveNfa_0(12, 0);
      case 46:
         jjmatchedKind = 47;
         return jjMoveNfa_0(12, 0);
      case 61:
         jjmatchedKind = 48;
         return jjMoveNfa_0(12, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x208800000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x40000040000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x710000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x9000000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0xc2000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x10000080000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x11020000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 91:
         jjmatchedKind = 43;
         return jjMoveNfa_0(12, 0);
      case 93:
         jjmatchedKind = 44;
         return jjMoveNfa_0(12, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x208800000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000040000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x710000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x9000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xc2000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10000080000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x11020000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      default :
         return jjMoveNfa_0(12, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 0);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0xc2780000L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x20200000000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x8020000000L);
      case 79:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40400040000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x14000000L);
      case 83:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xc2780000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20200000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8020000000L);
      case 111:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40400040000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x14000000L);
      case 115:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(12, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x280000L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x4020000L);
      case 76:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x10800000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x40500000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x8020000000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x280000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4020000L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10800000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40500000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x8020000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(12, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 68:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8080000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x10800400000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x40008200000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 83:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x4080000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 89:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 100:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8080000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10800400000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x40008200000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4080000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 121:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(12, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(12, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x880200000L);
      case 69:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000400000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x8080000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 84:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x880200000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000400000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8080000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(12, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x40408000000L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 69:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 71:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 84:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x40408000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 103:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(12, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(12, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x600000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 78:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 82:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x600000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(12, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 6);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 7;
         }
         break;
      case 84:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x700000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x700000L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(12, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 7);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 8;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x300000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 8;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x300000L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(12, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 8);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x300000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x300000L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(12, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 9);
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 10;
         }
         break;
      case 110:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(12, 10);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 244;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((0x8c00009cffffc9ffL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(0);
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0xac6200000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  else if ((0x430000000000L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  else if (curChar == 62)
                     jjAddStates(4, 7);
                  else if (curChar == 60)
                     jjAddStates(8, 11);
                  else if (curChar == 61)
                     jjCheckNAddTwoStates(231, 232);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  else if ((0xac2000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  else if ((0x4200000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 15);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(34, 35);
                  if (curChar == 33)
                     jjCheckNAddTwoStates(231, 232);
                  else if (curChar == 42)
                     jjAddStates(16, 17);
                  else if (curChar == 37)
                     jjAddStates(18, 19);
                  else if (curChar == 45)
                     jjAddStates(20, 21);
                  break;
               case 0:
                  if ((0x8c00009cffffc9ffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 33:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 34:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 39 && kind > 49)
                     kind = 49;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(22, 23);
                  break;
               case 40:
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(24, 26);
                  break;
               case 44:
                  if ((0xac6200000000L & l) != 0L && kind > 54)
                     kind = 54;
                  break;
               case 45:
                  if ((0xac2000000000L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 46:
                  if ((0x4200000000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 98:
                  if (curChar == 45)
                     jjAddStates(20, 21);
                  break;
               case 99:
                  if (curChar != 45)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(27, 29);
                  break;
               case 100:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(27, 29);
                  break;
               case 101:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 102:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 103:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(105, 107);
                  break;
               case 105:
                  jjCheckNAddTwoStates(105, 107);
                  break;
               case 106:
                  if (curChar == 45 && kind > 6)
                     kind = 6;
                  break;
               case 107:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(0, 3);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(109);
                  break;
               case 110:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(110);
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(115, 110);
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(37, 39);
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(119);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(119, 120);
                  break;
               case 122:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 15);
                  break;
               case 123:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(123, 124);
                  break;
               case 124:
                  if ((0x2400L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 125:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(125, 126);
                  break;
               case 126:
                  if (curChar == 34 && kind > 49)
                     kind = 49;
                  break;
               case 127:
                  if ((0x430000000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 224:
                  if (curChar == 37)
                     jjAddStates(18, 19);
                  break;
               case 225:
                  if (curChar == 37 && kind > 54)
                     kind = 54;
                  break;
               case 226:
                  if (curChar == 37 && kind > 55)
                     kind = 55;
                  break;
               case 227:
                  if (curChar == 42)
                     jjAddStates(16, 17);
                  break;
               case 228:
                  if (curChar == 42 && kind > 54)
                     kind = 54;
                  break;
               case 229:
                  if (curChar == 42 && kind > 55)
                     kind = 55;
                  break;
               case 230:
                  if (curChar == 33)
                     jjCheckNAddTwoStates(231, 232);
                  break;
               case 231:
                  if (curChar == 61 && kind > 54)
                     kind = 54;
                  break;
               case 232:
                  if (curChar == 61 && kind > 56)
                     kind = 56;
                  break;
               case 233:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(231, 232);
                  break;
               case 234:
                  if (curChar == 60)
                     jjAddStates(8, 11);
                  break;
               case 235:
                  if (curChar == 60)
                     jjCheckNAdd(231);
                  break;
               case 236:
                  if (curChar == 60 && kind > 54)
                     kind = 54;
                  break;
               case 237:
                  if (curChar == 60 && kind > 56)
                     kind = 56;
                  break;
               case 238:
                  if (curChar == 60)
                     jjCheckNAdd(232);
                  break;
               case 239:
                  if (curChar == 62)
                     jjAddStates(4, 7);
                  break;
               case 240:
                  if (curChar == 62)
                     jjCheckNAdd(231);
                  break;
               case 241:
                  if (curChar == 62 && kind > 54)
                     kind = 54;
                  break;
               case 242:
                  if (curChar == 62 && kind > 56)
                     kind = 56;
                  break;
               case 243:
                  if (curChar == 62)
                     jjCheckNAdd(232);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  else if ((0x28000000L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  else if (curChar == 124)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  else if ((0xe8000001d0000001L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 124)
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(24, 26);
                  }
                  if ((0x400000004L & l) != 0L)
                     jjAddStates(40, 43);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(44, 48);
                  else if ((0x20000000200L & l) != 0L)
                     jjCheckNAddStates(49, 54);
                  else if ((0x8000000080000L & l) != 0L)
                     jjAddStates(55, 60);
                  else if ((0x4000000040000L & l) != 0L)
                     jjAddStates(61, 62);
                  else if ((0x200000002L & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  else if ((0x10000000100000L & l) != 0L)
                     jjCheckNAddStates(66, 68);
                  else if ((0x1000000010L & l) != 0L)
                     jjCheckNAddStates(69, 72);
                  else if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 0:
                  if ((0xe8000001d0000001L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 95)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 9:
               case 68:
               case 82:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 10:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
               case 79:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 14:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x10000000100000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 19:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 20:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 27:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  jjAddStates(73, 74);
                  break;
               case 36:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(24, 26);
                  break;
               case 38:
               case 42:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(24, 26);
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(75, 78);
                  break;
               case 41:
                  if (curChar != 95)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if (curChar == 95)
                     jjCheckNAdd(42);
                  break;
               case 44:
                  if (curChar == 124 && kind > 54)
                     kind = 54;
                  break;
               case 46:
                  if (curChar == 124 && kind > 57)
                     kind = 57;
                  break;
               case 47:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAddStates(69, 72);
                  break;
               case 48:
                  if ((0x800000008000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 49:
                  if ((0x400000004000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 50:
               case 59:
               case 129:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 51:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 60:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 69:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAddStates(66, 68);
                  break;
               case 76:
                  if ((0x8000000080000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 77:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 78:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 80:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 83:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x100000001000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 89:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 91:
                  if ((0x1000000010L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 92:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 95:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 100:
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(27, 29);
                  break;
               case 105:
                  jjAddStates(79, 80);
                  break;
               case 109:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 123:
                  jjAddStates(81, 82);
                  break;
               case 125:
                  jjAddStates(83, 84);
                  break;
               case 127:
                  if ((0x28000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 128:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(55, 60);
                  break;
               case 130:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if ((0x8000000080L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 135:
               case 139:
               case 143:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(134);
                  break;
               case 136:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 140:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 144:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if ((0x8000000080L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 148:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0x8000000080L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 153:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAddStates(49, 54);
                  break;
               case 158:
                  if ((0x4000000040000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 159:
               case 164:
               case 169:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(158);
                  break;
               case 160:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 165:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 170:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if ((0x4000000040000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 175:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x4000000040000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 181:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(44, 48);
                  break;
               case 187:
               case 190:
               case 193:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 188:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 191:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 194:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if ((0x10000000100000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 197:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if ((0x10000000100000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 201:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if ((0x400000004L & l) != 0L)
                     jjAddStates(40, 43);
                  break;
               case 205:
                  if ((0x200000002000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 206:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
               case 213:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 209:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 214:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if ((0x400000004000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 219:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(0);
                  break;
               case 34:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 100:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(27, 29);
                  break;
               case 105:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(79, 80);
                  break;
               case 123:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 125:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(83, 84);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 244 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   109, 110, 114, 118, 240, 241, 242, 243, 235, 236, 237, 238, 123, 124, 125, 126, 
   228, 229, 225, 226, 99, 104, 38, 43, 37, 39, 41, 100, 101, 103, 115, 110, 
   116, 117, 115, 110, 116, 119, 120, 121, 207, 212, 217, 223, 189, 192, 195, 199, 
   203, 76, 163, 168, 173, 179, 185, 133, 138, 142, 146, 151, 156, 93, 97, 76, 
   87, 89, 78, 48, 80, 48, 58, 67, 74, 34, 35, 40, 37, 39, 41, 105, 
   107, 123, 124, 125, 126, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\54", null, null, null, null, null, null, null, null, 
null, null, "\133", "\135", "\50", "\51", "\56", "\75", null, null, null, null, null, 
null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3cbffffffffcf81L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[244];
private final int[] jjstateSet = new int[488];
protected char curChar;
/** Constructor. */
public UNIVALI1TokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public UNIVALI1TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 244; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
